@page "/quiz3"

<h1>Quiz 3</h1>

<p id="randomQuestionTB">Random question: @currentQuestion.Item1</p>
<p>Questions: @numberOfQuestionsInQuiz/15</p>

<!-- Buttons for choices -->
<button @onclick="() => CheckAnswer(choiceButton1)" class="choice-button">@choiceButton1</button>
<button @onclick="() => CheckAnswer(choiceButton2)" class="choice-button">@choiceButton2</button>
<button @onclick="() => CheckAnswer(choiceButton3)" class="choice-button">@choiceButton3</button>
<button @onclick="() => CheckAnswer(choiceButton4)" class="choice-button">@choiceButton4</button>

@code {
    private List<Tuple<string, List<string>, string>> questionsWithChoicesAndAnswers;
    private int currentQuestionIndex;
    private Random rnd = new Random();
    private Tuple<string, List<string>, string> currentQuestion;

    public int numberOfQuestionsInQuiz = 0;
    public int numberOfCorrectAnswers = 0;
    public int numberOfIncorrectAnswers = 0;

    protected override void OnInitialized()
    {
        InitializeQuestions(); // Initialize the questions when the component is created
        LoadNextQuestion();
    }

    private void InitializeQuestions()
    {
        questionsWithChoicesAndAnswers = new List<Tuple<string, List<string>, string>>
        {
            // Harder questions for Quiz 3
            Tuple.Create("What is the role of a central bank?",
                         new List<string> { "To regulate the economy and manage currency.", "To issue credit cards.", "To lend money to individuals.", "To promote advertising." },
                         "To regulate the economy and manage currency."),
            Tuple.Create("How can interest rates affect the economy?",
                         new List<string> { "Higher rates encourage borrowing.", "Lower rates discourage spending.", "Higher rates discourage borrowing.", "Rates have no effect." },
                         "Higher rates discourage borrowing."),
            Tuple.Create("What is the importance of having an emergency fund?",
                         new List<string> { "To cover unexpected expenses.", "To buy luxury items.", "To pay for vacations.", "To spend freely." },
                         "To cover unexpected expenses."),
            Tuple.Create("What does ROI stand for, and why is it important?",
                         new List<string> { "Return on Investment, important for assessing profitability.", "Rate of Interest, important for savings.", "Real Estate Investment, crucial for buying homes.", "Refund on Investment, important for tax." },
                         "Return on Investment, important for assessing profitability."),
            // Add more questions as needed
        };
    }

    private void LoadNextQuestion()
    {
        // Check if it is the final question
        if (numberOfQuestionsInQuiz >= 15)
        {
            double accuracy = (double)numberOfCorrectAnswers / numberOfQuestionsInQuiz * 100; // Convert to percentage
            ShowResults(accuracy); // Show results if finished
            return;
        }

        // Get a random question and choices
        currentQuestionIndex = rnd.Next(0, questionsWithChoicesAndAnswers.Count);
        currentQuestion = questionsWithChoicesAndAnswers[currentQuestionIndex];

        // Set choice button text
        choiceButton1 = currentQuestion.Item2[0];
        choiceButton2 = currentQuestion.Item2[1];
        choiceButton3 = currentQuestion.Item2[2];
        choiceButton4 = currentQuestion.Item2[3];

        numberOfQuestionsInQuiz++;
    }

    private void ShowResults(double accuracy)
    {
        // Show results in a message box or navigate to another page
        // For example, you could use navigation:
        // NavigationManager.NavigateTo("/results?accuracy=" + accuracy);
    }

    private void CheckAnswer(string selectedAnswer)
    {
        var correctAnswer = currentQuestion.Item3;

        if (selectedAnswer == correctAnswer)
        {
            numberOfCorrectAnswers++;
            // Optionally show correct feedback
        }
        else
        {
            // Optionally show incorrect feedback
        }

        // Remove the question from the list
        questionsWithChoicesAndAnswers.RemoveAt(currentQuestionIndex);
        LoadNextQuestion(); // Load the next question
    }

    // For choice button texts
    private string choiceButton1;
    private string choiceButton2;
    private string choiceButton3;
    private string choiceButton4;
}
